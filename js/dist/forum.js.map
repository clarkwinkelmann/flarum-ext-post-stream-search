{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/post-stream-search/webpack/bootstrap","webpack://@clarkwinkelmann/post-stream-search/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/post-stream-search/webpack/runtime/define property getters","webpack://@clarkwinkelmann/post-stream-search/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/post-stream-search/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/components/PostStream']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/states/PostStreamState']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@clarkwinkelmann/post-stream-search/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/Component']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/utils/withAttr']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/UserRelationshipSelect']\"","webpack://@clarkwinkelmann/post-stream-search/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@clarkwinkelmann/post-stream-search/./src/forum/components/Toolbar.ts","webpack://@clarkwinkelmann/post-stream-search/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@clarkwinkelmann/post-stream-search/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Tooltip'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostStream'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/PostStreamState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/withAttr'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/UserRelationshipSelect'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","import app from 'flarum/forum/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport PostStreamState from 'flarum/forum/states/PostStreamState';\nimport Button from 'flarum/common/components/Button';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport UserRelationshipSelect from 'flamarkt/backoffice/common/components/UserRelationshipSelect';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Post from 'flarum/common/models/Post';\n\ninterface ToolbarAttrs extends ComponentAttrs {\n    stream: PostStreamState\n}\n\nexport default class Toolbar extends Component<ToolbarAttrs> {\n    searchDebounce: number = 0\n\n    view() {\n        const actions = this.actionItems().toArray();\n\n        return m('.PostStreamToolbarWrapper', m('.container', m('.PostStreamToolbar', [\n            this.filterItems().toArray(),\n            m('.PostStreamToolbar-push'),\n            actions,\n            actions.length ? m('.PostStreamToolbar-separator') : null,\n            this.toolbarControlItems().toArray(),\n        ])));\n    }\n\n    filterItems() {\n        const items = new ItemList();\n\n        items.add('search', m('input.FormControl.js-post-toolbar-autofocus', {\n            placeholder: app.translator.trans('clarkwinkelmann-post-stream-search.forum.toolbar.searchPlaceholder'),\n            value: this.attrs.stream.filterSearch,\n            oninput: withAttr('value', (value: string) => {\n                this.attrs.stream.filterSearch = value;\n\n                clearTimeout(this.searchDebounce);\n\n                this.searchDebounce = setTimeout(() => {\n                    this.attrs.stream.applyFilters();\n                }, 300) as any;\n            }),\n        }), 100);\n\n        items.add('user', m(UserRelationshipSelect, {\n            relationship: this.attrs.stream.filterUsers,\n            onchange: users => {\n                this.attrs.stream.filterUsers = users;\n                this.attrs.stream.applyFilters();\n            },\n            placeholder: app.translator.trans('clarkwinkelmann-post-stream-search.forum.toolbar.authorPlaceholder'),\n            suggest: this.suggestUsers(),\n        }), 50);\n\n        if (this.attrs.stream.filterLoading) {\n            items.add('loading', LoadingIndicator.component({\n                display: 'inline',\n            }), -50);\n        } else if (Array.isArray(this.attrs.stream.filteredPostIds)) {\n            items.add('summary', m('span.PostStreamToolbarText', app.translator.trans('clarkwinkelmann-post-stream-search.forum.toolbar.summary', {\n                matching: this.attrs.stream.filteredPostIds.length,\n                total: this.attrs.stream.discussion.postIds().length,\n            })), -50);\n        }\n\n        return items;\n    }\n\n    suggestUsers() {\n        const usersAndReplyCount = new Map<string, number>();\n\n        this.attrs.stream.discussion.postIds().forEach(id => {\n            const post = app.store.getById<Post>('posts', id);\n\n            if (!post) {\n                return;\n            }\n\n            const author = post.user();\n\n            if (!author) {\n                return;\n            }\n\n            const lastCount = usersAndReplyCount.get(author.id()!) || 0;\n\n            usersAndReplyCount.set(author.id()!, lastCount + 1);\n        });\n\n        return Array.from(usersAndReplyCount.keys()).sort((idA, idB) => {\n            const countA = usersAndReplyCount.get(idA)!;\n            const countB = usersAndReplyCount.get(idB)!;\n\n            if (countA > countB) {\n                return 1;\n            }\n\n            if (countB > countA) {\n                return 1;\n            }\n\n            return 0;\n        }).map(id => app.store.getById('users', id));\n    }\n\n    actionItems() {\n        return new ItemList();\n    }\n\n    toolbarControlItems() {\n        const items = new ItemList();\n\n        const pinned = !!window.localStorage.getItem('showPostStreamToolbar');\n\n        items.add('pin', Tooltip.component({\n            text: app.translator.trans('clarkwinkelmann-post-stream-search.forum.toolbar.pin'),\n        }, Button.component({\n            className: 'Button Button--icon' + (pinned ? ' active' : ''),\n            icon: 'fas fa-thumbtack',\n            onclick: () => {\n                if (pinned) {\n                    window.localStorage.removeItem('showPostStreamToolbar');\n                } else {\n                    window.localStorage.setItem('showPostStreamToolbar', '1');\n                }\n            },\n        })), 100);\n\n        items.add('close', Tooltip.component({\n            text: app.translator.trans('clarkwinkelmann-post-stream-search.forum.toolbar.' + (pinned ? 'clear' : 'close')),\n        }, Button.component({\n            className: 'Button Button--icon',\n            icon: 'fas fa-times',\n            onclick: () => {\n                if (!pinned) {\n                    this.attrs.stream.showToolbar = false;\n                }\n\n                this.attrs.stream.clearFilters();\n            },\n        })), 50);\n\n        return items;\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import {extend, override} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport PostStream from 'flarum/forum/components/PostStream';\nimport PostStreamState from 'flarum/forum/states/PostStreamState';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport Post from 'flarum/common/models/Post';\nimport icon from 'flarum/common/helpers/icon';\nimport Toolbar from './components/Toolbar';\n\napp.initializers.add('clarkwinkelmann-post-stream-search', () => {\n    extend(DiscussionPage.prototype, 'pageContent', function (items) {\n        if (!this.stream || !this.stream.showToolbar) {\n            return;\n        }\n\n        items.add('stream-toolbar', m(Toolbar, {\n            stream: this.stream,\n        }), -200);\n    });\n\n    // Use show() as a way to extend the constructor\n    extend(PostStreamState.prototype, 'show', function () {\n        if (typeof this.showToolbar !== 'undefined') {\n            return;\n        }\n\n        this.showToolbar = !!window.localStorage.getItem('showPostStreamToolbar');\n        this.filterSearch = '';\n        this.filterUsers = [];\n        this.filteredPostIds = null;\n        this.filterLoading = false;\n    });\n\n    override(PostStreamState.prototype, 'loadRange', function (original, start, end) {\n        if (!Array.isArray(this.filteredPostIds)) {\n            return original(start, end);\n        }\n\n        const loadIds: string[] = [];\n        const loaded: Post[] = [];\n\n        this.filteredPostIds.slice(start, end)\n            .forEach((id) => {\n                const post = app.store.getById<Post>('posts', id);\n\n                if (post && post.discussion() && typeof post.canEdit() !== 'undefined') {\n                    loaded.push(post);\n                } else {\n                    loadIds.push(id);\n                }\n            });\n\n        if (loadIds.length) {\n            return app.store.find<Post[]>('posts', loadIds).then((newPosts) => {\n                return loaded.concat(newPosts).sort((a, b) => a.number() - b.number());\n            });\n        }\n\n        return Promise.resolve(loaded);\n    });\n\n    override(PostStreamState.prototype, 'show', function (original, posts) {\n        if (!Array.isArray(this.filteredPostIds)) {\n            return original(posts);\n        }\n\n        this.visibleStart = posts.length ? this.filteredPostIds.indexOf(posts[0].id() ?? '0') : 0;\n        this.visibleEnd = this.sanitizeIndex(this.visibleStart + posts.length);\n    });\n\n    override(PostStreamState.prototype, 'posts', function (original) {\n        if (!Array.isArray(this.filteredPostIds)) {\n            return original();\n        }\n\n        return this.filteredPostIds.slice(this.visibleStart, this.visibleEnd)\n            .map((id) => {\n                const post = app.store.getById<Post>('posts', id);\n\n                return post && post.discussion() && typeof post.canEdit() !== 'undefined' ? post : null;\n            });\n    });\n\n    override(PostStreamState.prototype, 'count', function (original) {\n        if (!Array.isArray(this.filteredPostIds)) {\n            return original();\n        }\n\n        return this.filteredPostIds.length;\n    });\n\n    override(PostStreamState.prototype, 'loadNearNumber', function (original, number) {\n        if (!Array.isArray(this.filteredPostIds)) {\n            return original(number);\n        }\n\n        if (this.posts().some((post) => post && Number(post.number()) === Number(number))) {\n            return Promise.resolve();\n        }\n\n        const suggestRemovingFilter = () => {\n            let alert: any;\n            const viewButton = Button.component({\n                className: 'Button Button--link',\n                onclick: () => {\n                    this.clearFilters(number);\n                    app.alerts.dismiss(alert);\n                },\n            }, app.translator.trans('clarkwinkelmann-post-stream-search.forum.cannotGoToPost.action'));\n\n            alert = app.alerts.show({\n                controls: [viewButton],\n            }, app.translator.trans('clarkwinkelmann-post-stream-search.forum.cannotGoToPost.message'));\n        }\n\n        const postExistsInStore = app.store.all<Post>('posts').some(post => Number(post.number()) === Number(number) && post.discussion() === this.discussion);\n\n        if (postExistsInStore) {\n            suggestRemovingFilter();\n\n            return Promise.resolve();\n        }\n\n        this.reset();\n\n        // Replicate what loadNearNumber did in a way that's compatible with the filtered data\n        return this.retrieveFilteredDiscussion(number).then(payload => {\n            const fullPosts: Post[] = [];\n            let numberFound = false;\n\n            payload.data.forEach(entry => {\n                if (entry.attributes) {\n                    const post = app.store.pushObject<Post>(entry)!;\n                    fullPosts.push(post);\n\n                    if (Number(post.number()) === Number(number)) {\n                        numberFound = true;\n                    }\n                }\n            });\n\n            this.show(fullPosts);\n\n            if (!numberFound) {\n                suggestRemovingFilter();\n            }\n        });\n    });\n\n    override(PostStreamState.prototype, 'update', function (original) {\n        if (!Array.isArray(this.filteredPostIds)) {\n            return original();\n        }\n\n        return new Promise<void>(resolve => {\n            // Retrieve the updated list of matching posts and then show the end\n            // It doesn't matter too much to load with the correct \"near\" value because this is used when writing\n            // a new post and the end is probably already loaded and the new post as well\n            // Even if we are not going to move in the discussion, it still made sense to refresh for the meta-data\n            this.retrieveFilteredDiscussion().then(() => {\n                original().then(() => {\n                    resolve();\n                });\n            });\n        });\n    });\n\n    PostStreamState.prototype.retrieveFilteredDiscussion = function (near?: number) {\n        const filter: any = {};\n\n        if (this.filterSearch) {\n            filter.q = this.filterSearch;\n        }\n\n        if (this.filterUsers.length > 0) {\n            filter.author = this.filterUsers.map(user => user.username()).join(',');\n        }\n\n        this.filterLoading = true;\n\n        return app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/discussions/' + this.discussion.id() + '/posts-search',\n            params: {\n                filter,\n                page: {\n                    near,\n                },\n            },\n        }).then(payload => {\n            this.filteredPostIds = [];\n\n            payload.data.forEach(entry => {\n                this.filteredPostIds!.push(entry.id);\n            });\n\n            this.filterLoading = false;\n\n            return payload;\n        });\n    }\n\n    PostStreamState.prototype.applyFilters = function (near?: number) {\n        // We can't read the up to date value for near from m.route.param because the value is updated through history.replaceState\n        const expectedPathPrefix = app.route.discussion(this.discussion) + '/';\n        const urlPath = window.location.pathname;\n\n        if (!near && urlPath.indexOf(expectedPathPrefix) === 0) {\n            near = parseInt(urlPath.substr(expectedPathPrefix.length));\n        }\n\n        if (!this.filterSearch && this.filterUsers.length === 0) {\n            this.filteredPostIds = null;\n            this.highlightPostSearch = undefined;\n\n            if (near) {\n                // When clearing the search, we can be pretty sure the post that was visible while filtered will also be visible in the complete view\n                this.goToNumber(near);\n            } else {\n                this.goToFirst();\n            }\n\n            return;\n        }\n\n        this.retrieveFilteredDiscussion(near).then(payload => {\n            let closestPost: Post | null = null;\n            let closestDistance = 1000;\n\n            const fullPosts: Post[] = [];\n\n            payload.data.forEach(entry => {\n                // Not all entries in payload.data will be complete\n                if (entry.attributes) {\n                    const post = app.store.pushObject<Post>(entry)!;\n                    fullPosts.push(post);\n\n                    // In case none of the posts are anywhere close, we'll focus the first found\n                    if (closestPost === null) {\n                        closestPost = post;\n                    }\n\n                    // Find the closest post in the results compared to the place we were before searching\n                    if (near) {\n                        const distance = Math.abs(post.number() - near);\n\n                        if (distance < closestDistance) {\n                            closestDistance = distance;\n                            closestPost = post;\n                        }\n                    }\n                }\n            });\n\n            this.show(fullPosts);\n\n            this.highlightPostSearch = this.filterSearch;\n\n            m.redraw();\n\n            // These methods shouldn't load any more data since the target post is already loaded\n            // However it will set the correct post target for the stream to auto-scroll to\n            if (closestPost) {\n                this.goToNumber(closestPost.number());\n            } else {\n                this.goToFirst();\n            }\n        });\n    }\n\n    PostStreamState.prototype.clearFilters = function (near?: number) {\n        this.filterSearch = '';\n        this.filterUsers = [];\n\n        this.applyFilters(near);\n    }\n\n    window.addEventListener('keydown', function (event) {\n        const stream = app.current.get('stream');\n\n        if (!stream) {\n            return;\n        }\n\n        if ((event.ctrlKey || event.metaKey) && event.key === 'F' && app.current.matches(DiscussionPage)) {\n            event.preventDefault();\n\n            stream.showToolbar = true;\n\n            const selection = window.getSelection().toString().trim();\n\n            if (selection) {\n                stream.filterSearch = selection;\n                stream.applyFilters();\n            }\n\n            m.redraw();\n\n            setTimeout(() => {\n                // Do this every time, even if the toolbar was already open\n                $('.js-post-toolbar-autofocus').trigger('focus').trigger('select');\n            }, 0);\n\n            // The quote button might not hide itself when we access the search via the keyboard shortcut\n            // We'll manually hide it similarly to how it hides itself on click\n            $('.Post-quoteButtonContainer .PostQuoteButton').hide();\n        }\n\n        if (event.key === 'Escape' && stream.showToolbar) {\n            const pinned = !!window.localStorage.getItem('showPostStreamToolbar');\n\n            if (!pinned) {\n                stream.showToolbar = false;\n                m.redraw();\n            }\n\n            stream.clearFilters();\n        }\n    });\n\n    extend(PostStream.prototype, 'view', function (vdom) {\n        if (!Array.isArray(this.stream.filteredPostIds)) {\n            return;\n        }\n\n        if (this.stream.filteredPostIds.length === 0) {\n            vdom.children.unshift(m('.PostStream-filterNoResults', [\n                icon('fas fa-search'),\n                m('div', app.translator.trans('clarkwinkelmann-post-stream-search.forum.stream.noResults')),\n            ]));\n\n            return;\n        }\n\n        const allPostIds = this.discussion.postIds();\n\n        // If there is no text search, we switch the message to just say other users\n        const translation = 'clarkwinkelmann-post-stream-search.forum.stream.' + (this.stream.filterSearch ? 'unmatchedGap' : 'otherAuthorsGap');\n\n        vdom.children.forEach(item => {\n            if (!item.attrs || !item.attrs['data-id']) {\n                return;\n            }\n\n            const indexInDiscussion = allPostIds.indexOf(item.attrs['data-id']);\n            const indexInResults = this.stream.filteredPostIds.indexOf(item.attrs['data-id']);\n\n            // If the post is not found, abort\n            if (indexInDiscussion < 0 || indexInResults < 0) {\n                return;\n            }\n\n            // All the checks are done between current and next post\n            // But for the very first we also need to check before\n            if (indexInResults === 0 && indexInDiscussion > 0) {\n                item.children.unshift(m('.PostStream-timeGap', app.translator.trans(translation, {\n                    count: indexInDiscussion,\n                })));\n            }\n\n            // If this is the last post in the full discussion, there won't be anything to show\n            if (indexInDiscussion === allPostIds.length - 1) {\n                return;\n            }\n\n            const nextPostIdInResults = this.stream.filteredPostIds[indexInResults + 1];\n            const indexOfNextPostInAllDiscussion = indexInResults + 1 >= this.stream.filteredPostIds.length ? allPostIds.length : allPostIds.indexOf(nextPostIdInResults);\n\n            // If the post is not found, abort\n            if (indexOfNextPostInAllDiscussion < 0) {\n                return;\n            }\n\n            const numberOfUnmatchedPostsBetween = indexOfNextPostInAllDiscussion - indexInDiscussion - 1;\n\n            if (numberOfUnmatchedPostsBetween <= 0) {\n                return;\n            }\n\n            item.children.push(m('.PostStream-timeGap', app.translator.trans(translation, {\n                count: numberOfUnmatchedPostsBetween,\n            })));\n        });\n    });\n\n    extend(DiscussionControls, 'userControls', function (items) {\n        if (!app.forum.attribute('post-stream-search.dropdownAccess')) {\n            return;\n        }\n\n        items.add('filter-toolbar', Button.component({\n            onclick() {\n                const stream = app.current.get('stream');\n\n                if (stream) {\n                    stream.showToolbar = true;\n\n                    setTimeout(() => {\n                        $('.js-post-toolbar-autofocus').trigger('focus');\n                    }, 0);\n                }\n            },\n            icon: 'fas fa-search',\n        }, app.translator.trans('clarkwinkelmann-post-stream-search.forum.discussionControls.searchInDiscussion')));\n    });\n\n    extend(PostControls, 'userControls', function (items, post) {\n        if (!app.forum.attribute('post-stream-search.authorQuickFilter')) {\n            return;\n        }\n\n        const author = post.user();\n\n        if (!author) {\n            return;\n        }\n\n        items.add('filter-author', Button.component({\n            onclick() {\n                const stream = app.current.get('stream');\n\n                if (stream) {\n                    stream.showToolbar = true;\n                    stream.filterSearch = '';\n                    stream.filterUsers = [author];\n                    stream.applyFilters();\n                }\n            },\n            icon: 'fas fa-filter',\n        }, app.translator.trans('clarkwinkelmann-post-stream-search.forum.postControls.authorFilter')));\n    });\n\n    extend(CommentPost.prototype, 'headerItems', function (items) {\n        if (!app.forum.attribute('post-stream-search.originalPosterBadge')) {\n            return;\n        }\n\n        const user = this.attrs.post.user();\n        const discussion = this.attrs.post.discussion();\n\n        if (user && user === discussion.user()) {\n            items.add('original-poster', Tooltip.component({\n                text: app.translator.trans('clarkwinkelmann-post-stream-search.forum.post.opBadgeTooltip')\n            }, m('span.OriginalPosterBadge', {\n                onclick() {\n                    const stream = app.current.get('stream');\n\n                    if (stream) {\n                        stream.showToolbar = true;\n                        stream.filterSearch = '';\n                        stream.filterUsers = [user];\n                        stream.applyFilters();\n                    }\n                },\n            }, app.translator.trans('clarkwinkelmann-post-stream-search.forum.post.opBadge'))))\n        }\n    });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","extensions","Toolbar","_Component","subClass","superClass","_this","_len","arguments","length","args","Array","_key","apply","concat","searchDebounce","create","constructor","_proto","view","actions","this","actionItems","toArray","m","filterItems","toolbarControlItems","_this2","items","ItemList","add","placeholder","app","attrs","stream","filterSearch","oninput","withAttr","clearTimeout","setTimeout","applyFilters","UserRelationshipSelect","relationship","filterUsers","onchange","users","suggest","suggestUsers","filterLoading","LoadingIndicator","display","isArray","filteredPostIds","matching","total","discussion","postIds","usersAndReplyCount","Map","forEach","id","post","author","user","lastCount","set","from","keys","sort","idA","idB","countA","countB","map","_this3","pinned","window","localStorage","getItem","Tooltip","text","Button","className","icon","onclick","removeItem","setItem","showToolbar","clearFilters","Component","extend","DiscussionPage","PostStreamState","override","original","start","end","loadIds","loaded","slice","canEdit","push","then","newPosts","b","number","Promise","resolve","posts","_posts$0$id","visibleStart","indexOf","visibleEnd","sanitizeIndex","some","Number","suggestRemovingFilter","alert","viewButton","controls","reset","retrieveFilteredDiscussion","payload","fullPosts","numberFound","data","entry","attributes","show","near","filter","q","username","join","method","url","params","page","_this4","expectedPathPrefix","urlPath","location","pathname","parseInt","substr","highlightPostSearch","undefined","goToNumber","goToFirst","closestPost","closestDistance","distance","Math","abs","redraw","addEventListener","event","ctrlKey","metaKey","preventDefault","selection","getSelection","toString","trim","$","trigger","hide","PostStream","vdom","_this5","allPostIds","translation","children","item","indexInDiscussion","indexInResults","unshift","count","nextPostIdInResults","indexOfNextPostInAllDiscussion","numberOfUnmatchedPostsBetween","DiscussionControls","PostControls","CommentPost"],"sourceRoot":""}